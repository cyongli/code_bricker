/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trans_operands_H
#define trans_operands_H

#include <thrift/TDispatchProcessor.h>
#include "test_types.h"

namespace test {

class trans_operandsIf {
 public:
  virtual ~trans_operandsIf() {}
  virtual void trans_operands(const Operand& first, const Operand& second) = 0;
};

class trans_operandsIfFactory {
 public:
  typedef trans_operandsIf Handler;

  virtual ~trans_operandsIfFactory() {}

  virtual trans_operandsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(trans_operandsIf* /* handler */) = 0;
};

class trans_operandsIfSingletonFactory : virtual public trans_operandsIfFactory {
 public:
  trans_operandsIfSingletonFactory(const boost::shared_ptr<trans_operandsIf>& iface) : iface_(iface) {}
  virtual ~trans_operandsIfSingletonFactory() {}

  virtual trans_operandsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(trans_operandsIf* /* handler */) {}

 protected:
  boost::shared_ptr<trans_operandsIf> iface_;
};

class trans_operandsNull : virtual public trans_operandsIf {
 public:
  virtual ~trans_operandsNull() {}
  void trans_operands(const Operand& /* first */, const Operand& /* second */) {
    return;
  }
};

typedef struct _trans_operands_trans_operands_args__isset {
  _trans_operands_trans_operands_args__isset() : first(false), second(false) {}
  bool first;
  bool second;
} _trans_operands_trans_operands_args__isset;

class trans_operands_trans_operands_args {
 public:

  trans_operands_trans_operands_args() {
  }

  virtual ~trans_operands_trans_operands_args() throw() {}

  Operand first;
  Operand second;

  _trans_operands_trans_operands_args__isset __isset;

  void __set_first(const Operand& val) {
    first = val;
  }

  void __set_second(const Operand& val) {
    second = val;
  }

  bool operator == (const trans_operands_trans_operands_args & rhs) const
  {
    if (!(first == rhs.first))
      return false;
    if (!(second == rhs.second))
      return false;
    return true;
  }
  bool operator != (const trans_operands_trans_operands_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const trans_operands_trans_operands_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_operands_trans_operands_pargs {
 public:


  virtual ~trans_operands_trans_operands_pargs() throw() {}

  const Operand* first;
  const Operand* second;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_operands_trans_operands_result {
 public:

  trans_operands_trans_operands_result() {
  }

  virtual ~trans_operands_trans_operands_result() throw() {}


  bool operator == (const trans_operands_trans_operands_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const trans_operands_trans_operands_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const trans_operands_trans_operands_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_operands_trans_operands_presult {
 public:


  virtual ~trans_operands_trans_operands_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class trans_operandsClient : virtual public trans_operandsIf {
 public:
  trans_operandsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  trans_operandsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void trans_operands(const Operand& first, const Operand& second);
  void send_trans_operands(const Operand& first, const Operand& second);
  void recv_trans_operands();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class trans_operandsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<trans_operandsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (trans_operandsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_trans_operands(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  trans_operandsProcessor(boost::shared_ptr<trans_operandsIf> iface) :
    iface_(iface) {
    processMap_["trans_operands"] = &trans_operandsProcessor::process_trans_operands;
  }

  virtual ~trans_operandsProcessor() {}
};

class trans_operandsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  trans_operandsProcessorFactory(const ::boost::shared_ptr< trans_operandsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< trans_operandsIfFactory > handlerFactory_;
};

class trans_operandsMultiface : virtual public trans_operandsIf {
 public:
  trans_operandsMultiface(std::vector<boost::shared_ptr<trans_operandsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~trans_operandsMultiface() {}
 protected:
  std::vector<boost::shared_ptr<trans_operandsIf> > ifaces_;
  trans_operandsMultiface() {}
  void add(boost::shared_ptr<trans_operandsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void trans_operands(const Operand& first, const Operand& second) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->trans_operands(first, second);
    }
    ifaces_[i]->trans_operands(first, second);
  }

};

} // namespace

#endif
