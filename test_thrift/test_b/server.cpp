// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/trans_heartbeat.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include<iostream>
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class trans_heartbeatHandler : virtual public trans_heartbeatIf {
 public:
  trans_heartbeatHandler() { }
  void trans_heartbeat(const heartbeat& hb){
    std::cout<<hb.hostname<<std::endl;
    std::cout<<hb.cpu_util<<std::endl;
    std::cout<<hb.mem_util<<std::endl;
    std::cout<<hb.disk_util<<std::endl;
    return;
  }
};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<trans_heartbeatHandler> handler(new trans_heartbeatHandler());
  shared_ptr<TProcessor> processor(new trans_heartbeatProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
