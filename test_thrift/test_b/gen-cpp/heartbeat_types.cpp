/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "heartbeat_types.h"

#include <algorithm>



const char* heartbeat::ascii_fingerprint = "404E13C197753240A95904827D10660E";
const uint8_t heartbeat::binary_fingerprint[16] = {0x40,0x4E,0x13,0xC1,0x97,0x75,0x32,0x40,0xA9,0x59,0x04,0x82,0x7D,0x10,0x66,0x0E};

uint32_t heartbeat::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->hostname);
          this->__isset.hostname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cpu_util);
          this->__isset.cpu_util = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->mem_util);
          this->__isset.mem_util = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->disk_util);
          this->__isset.disk_util = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t heartbeat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("heartbeat");

  xfer += oprot->writeFieldBegin("hostname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->hostname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpu_util", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->cpu_util);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mem_util", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->mem_util);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("disk_util", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->disk_util);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(heartbeat &a, heartbeat &b) {
  using ::std::swap;
  swap(a.hostname, b.hostname);
  swap(a.cpu_util, b.cpu_util);
  swap(a.mem_util, b.mem_util);
  swap(a.disk_util, b.disk_util);
  swap(a.__isset, b.__isset);
}


