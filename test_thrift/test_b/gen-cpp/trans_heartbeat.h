/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trans_heartbeat_H
#define trans_heartbeat_H

#include <thrift/TDispatchProcessor.h>
#include "heartbeat_types.h"



class trans_heartbeatIf {
 public:
  virtual ~trans_heartbeatIf() {}
  virtual void trans_heartbeat(const heartbeat& hb) = 0;
};

class trans_heartbeatIfFactory {
 public:
  typedef trans_heartbeatIf Handler;

  virtual ~trans_heartbeatIfFactory() {}

  virtual trans_heartbeatIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(trans_heartbeatIf* /* handler */) = 0;
};

class trans_heartbeatIfSingletonFactory : virtual public trans_heartbeatIfFactory {
 public:
  trans_heartbeatIfSingletonFactory(const boost::shared_ptr<trans_heartbeatIf>& iface) : iface_(iface) {}
  virtual ~trans_heartbeatIfSingletonFactory() {}

  virtual trans_heartbeatIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(trans_heartbeatIf* /* handler */) {}

 protected:
  boost::shared_ptr<trans_heartbeatIf> iface_;
};

class trans_heartbeatNull : virtual public trans_heartbeatIf {
 public:
  virtual ~trans_heartbeatNull() {}
  void trans_heartbeat(const heartbeat& /* hb */) {
    return;
  }
};

typedef struct _trans_heartbeat_trans_heartbeat_args__isset {
  _trans_heartbeat_trans_heartbeat_args__isset() : hb(false) {}
  bool hb;
} _trans_heartbeat_trans_heartbeat_args__isset;

class trans_heartbeat_trans_heartbeat_args {
 public:

  trans_heartbeat_trans_heartbeat_args() {
  }

  virtual ~trans_heartbeat_trans_heartbeat_args() throw() {}

  heartbeat hb;

  _trans_heartbeat_trans_heartbeat_args__isset __isset;

  void __set_hb(const heartbeat& val) {
    hb = val;
  }

  bool operator == (const trans_heartbeat_trans_heartbeat_args & rhs) const
  {
    if (!(hb == rhs.hb))
      return false;
    return true;
  }
  bool operator != (const trans_heartbeat_trans_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const trans_heartbeat_trans_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_heartbeat_trans_heartbeat_pargs {
 public:


  virtual ~trans_heartbeat_trans_heartbeat_pargs() throw() {}

  const heartbeat* hb;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_heartbeat_trans_heartbeat_result {
 public:

  trans_heartbeat_trans_heartbeat_result() {
  }

  virtual ~trans_heartbeat_trans_heartbeat_result() throw() {}


  bool operator == (const trans_heartbeat_trans_heartbeat_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const trans_heartbeat_trans_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const trans_heartbeat_trans_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class trans_heartbeat_trans_heartbeat_presult {
 public:


  virtual ~trans_heartbeat_trans_heartbeat_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class trans_heartbeatClient : virtual public trans_heartbeatIf {
 public:
  trans_heartbeatClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  trans_heartbeatClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void trans_heartbeat(const heartbeat& hb);
  void send_trans_heartbeat(const heartbeat& hb);
  void recv_trans_heartbeat();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class trans_heartbeatProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<trans_heartbeatIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (trans_heartbeatProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_trans_heartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  trans_heartbeatProcessor(boost::shared_ptr<trans_heartbeatIf> iface) :
    iface_(iface) {
    processMap_["trans_heartbeat"] = &trans_heartbeatProcessor::process_trans_heartbeat;
  }

  virtual ~trans_heartbeatProcessor() {}
};

class trans_heartbeatProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  trans_heartbeatProcessorFactory(const ::boost::shared_ptr< trans_heartbeatIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< trans_heartbeatIfFactory > handlerFactory_;
};

class trans_heartbeatMultiface : virtual public trans_heartbeatIf {
 public:
  trans_heartbeatMultiface(std::vector<boost::shared_ptr<trans_heartbeatIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~trans_heartbeatMultiface() {}
 protected:
  std::vector<boost::shared_ptr<trans_heartbeatIf> > ifaces_;
  trans_heartbeatMultiface() {}
  void add(boost::shared_ptr<trans_heartbeatIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void trans_heartbeat(const heartbeat& hb) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->trans_heartbeat(hb);
    }
    ifaces_[i]->trans_heartbeat(hb);
  }

};



#endif
